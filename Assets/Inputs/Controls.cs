//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Inputs/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameplayController: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameplayController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""gameplay"",
            ""id"": ""78909a7e-01a8-4af9-bf64-92869bcc6ddd"",
            ""actions"": [
                {
                    ""name"": ""Do"",
                    ""type"": ""Button"",
                    ""id"": ""f02a619e-0dee-4354-91e5-8ea17b880930"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Re"",
                    ""type"": ""Button"",
                    ""id"": ""5aa60c44-0794-451b-a3d6-80ed2345a559"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Mi"",
                    ""type"": ""Button"",
                    ""id"": ""b56a361e-2865-40a2-a133-367414f32e4f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fa"",
                    ""type"": ""Button"",
                    ""id"": ""00e26b6e-78d7-42ed-9614-1e8840310456"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sol"",
                    ""type"": ""Button"",
                    ""id"": ""4affa22d-5401-4c85-90b3-4a845cd1a424"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause/Resume"",
                    ""type"": ""Button"",
                    ""id"": ""694b9b67-20f5-4c11-bbee-6f7a2acb7351"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f7008b2f-04d2-4cc6-a646-cfe9d0990fcd"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Do"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""455907e5-b7c3-4326-80e9-df81fb094b7f"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Re"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""52b4d820-f708-432c-aaaa-a31a5461d6ba"",
                    ""path"": ""<Keyboard>/comma"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mi"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5feb4ac3-6700-4c07-a2b1-4c5abe0de434"",
                    ""path"": ""<Keyboard>/period"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fa"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5f5dd492-b9e0-49a5-8b6a-c41a7816b6a1"",
                    ""path"": ""<Keyboard>/minus"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sol"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fa971589-0d46-4f26-af1f-93a19f348726"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause/Resume"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // gameplay
        m_gameplay = asset.FindActionMap("gameplay", throwIfNotFound: true);
        m_gameplay_Do = m_gameplay.FindAction("Do", throwIfNotFound: true);
        m_gameplay_Re = m_gameplay.FindAction("Re", throwIfNotFound: true);
        m_gameplay_Mi = m_gameplay.FindAction("Mi", throwIfNotFound: true);
        m_gameplay_Fa = m_gameplay.FindAction("Fa", throwIfNotFound: true);
        m_gameplay_Sol = m_gameplay.FindAction("Sol", throwIfNotFound: true);
        m_gameplay_PauseResume = m_gameplay.FindAction("Pause/Resume", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // gameplay
    private readonly InputActionMap m_gameplay;
    private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
    private readonly InputAction m_gameplay_Do;
    private readonly InputAction m_gameplay_Re;
    private readonly InputAction m_gameplay_Mi;
    private readonly InputAction m_gameplay_Fa;
    private readonly InputAction m_gameplay_Sol;
    private readonly InputAction m_gameplay_PauseResume;
    public struct GameplayActions
    {
        private @GameplayController m_Wrapper;
        public GameplayActions(@GameplayController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Do => m_Wrapper.m_gameplay_Do;
        public InputAction @Re => m_Wrapper.m_gameplay_Re;
        public InputAction @Mi => m_Wrapper.m_gameplay_Mi;
        public InputAction @Fa => m_Wrapper.m_gameplay_Fa;
        public InputAction @Sol => m_Wrapper.m_gameplay_Sol;
        public InputAction @PauseResume => m_Wrapper.m_gameplay_PauseResume;
        public InputActionMap Get() { return m_Wrapper.m_gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
            @Do.started += instance.OnDo;
            @Do.performed += instance.OnDo;
            @Do.canceled += instance.OnDo;
            @Re.started += instance.OnRe;
            @Re.performed += instance.OnRe;
            @Re.canceled += instance.OnRe;
            @Mi.started += instance.OnMi;
            @Mi.performed += instance.OnMi;
            @Mi.canceled += instance.OnMi;
            @Fa.started += instance.OnFa;
            @Fa.performed += instance.OnFa;
            @Fa.canceled += instance.OnFa;
            @Sol.started += instance.OnSol;
            @Sol.performed += instance.OnSol;
            @Sol.canceled += instance.OnSol;
            @PauseResume.started += instance.OnPauseResume;
            @PauseResume.performed += instance.OnPauseResume;
            @PauseResume.canceled += instance.OnPauseResume;
        }

        private void UnregisterCallbacks(IGameplayActions instance)
        {
            @Do.started -= instance.OnDo;
            @Do.performed -= instance.OnDo;
            @Do.canceled -= instance.OnDo;
            @Re.started -= instance.OnRe;
            @Re.performed -= instance.OnRe;
            @Re.canceled -= instance.OnRe;
            @Mi.started -= instance.OnMi;
            @Mi.performed -= instance.OnMi;
            @Mi.canceled -= instance.OnMi;
            @Fa.started -= instance.OnFa;
            @Fa.performed -= instance.OnFa;
            @Fa.canceled -= instance.OnFa;
            @Sol.started -= instance.OnSol;
            @Sol.performed -= instance.OnSol;
            @Sol.canceled -= instance.OnSol;
            @PauseResume.started -= instance.OnPauseResume;
            @PauseResume.performed -= instance.OnPauseResume;
            @PauseResume.canceled -= instance.OnPauseResume;
        }

        public void RemoveCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayActions @gameplay => new GameplayActions(this);
    public interface IGameplayActions
    {
        void OnDo(InputAction.CallbackContext context);
        void OnRe(InputAction.CallbackContext context);
        void OnMi(InputAction.CallbackContext context);
        void OnFa(InputAction.CallbackContext context);
        void OnSol(InputAction.CallbackContext context);
        void OnPauseResume(InputAction.CallbackContext context);
    }
}
